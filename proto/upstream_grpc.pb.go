// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: upstream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UpstreamService_ProcessRequest_FullMethodName = "/gatesvr.proto.UpstreamService/ProcessRequest"
	UpstreamService_GetStatus_FullMethodName      = "/gatesvr.proto.UpstreamService/GetStatus"
)

// UpstreamServiceClient is the client API for UpstreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 上游服务接口定义
type UpstreamServiceClient interface {
	// 处理业务请求
	ProcessRequest(ctx context.Context, in *UpstreamRequest, opts ...grpc.CallOption) (*UpstreamResponse, error)
	// 获取服务状态
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type upstreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpstreamServiceClient(cc grpc.ClientConnInterface) UpstreamServiceClient {
	return &upstreamServiceClient{cc}
}

func (c *upstreamServiceClient) ProcessRequest(ctx context.Context, in *UpstreamRequest, opts ...grpc.CallOption) (*UpstreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpstreamResponse)
	err := c.cc.Invoke(ctx, UpstreamService_ProcessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, UpstreamService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstreamServiceServer is the server API for UpstreamService service.
// All implementations must embed UnimplementedUpstreamServiceServer
// for forward compatibility.
//
// 上游服务接口定义
type UpstreamServiceServer interface {
	// 处理业务请求
	ProcessRequest(context.Context, *UpstreamRequest) (*UpstreamResponse, error)
	// 获取服务状态
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedUpstreamServiceServer()
}

// UnimplementedUpstreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUpstreamServiceServer struct{}

func (UnimplementedUpstreamServiceServer) ProcessRequest(context.Context, *UpstreamRequest) (*UpstreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRequest not implemented")
}
func (UnimplementedUpstreamServiceServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedUpstreamServiceServer) mustEmbedUnimplementedUpstreamServiceServer() {}
func (UnimplementedUpstreamServiceServer) testEmbeddedByValue()                         {}

// UnsafeUpstreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpstreamServiceServer will
// result in compilation errors.
type UnsafeUpstreamServiceServer interface {
	mustEmbedUnimplementedUpstreamServiceServer()
}

func RegisterUpstreamServiceServer(s grpc.ServiceRegistrar, srv UpstreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedUpstreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UpstreamService_ServiceDesc, srv)
}

func _UpstreamService_ProcessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpstreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServiceServer).ProcessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpstreamService_ProcessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServiceServer).ProcessRequest(ctx, req.(*UpstreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstreamService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpstreamService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServiceServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpstreamService_ServiceDesc is the grpc.ServiceDesc for UpstreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpstreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gatesvr.proto.UpstreamService",
	HandlerType: (*UpstreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessRequest",
			Handler:    _UpstreamService_ProcessRequest_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _UpstreamService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upstream.proto",
}

const (
	GatewayService_PushToClient_FullMethodName       = "/gatesvr.proto.GatewayService/PushToClient"
	GatewayService_BroadcastToClients_FullMethodName = "/gatesvr.proto.GatewayService/BroadcastToClients"
	GatewayService_RegisterUpstream_FullMethodName   = "/gatesvr.proto.GatewayService/RegisterUpstream"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 网关服务接口定义 - 供上游服务调用
type GatewayServiceClient interface {
	// 单播推送消息到指定客户端
	PushToClient(ctx context.Context, in *UnicastPushRequest, opts ...grpc.CallOption) (*UnicastPushResponse, error)
	// ADDED FOR BROADCAST: 广播消息到所有在线客户端
	BroadcastToClients(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error)
	// upstream服务注册
	RegisterUpstream(ctx context.Context, in *UpstreamRegisterRequest, opts ...grpc.CallOption) (*UpstreamRegisterResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) PushToClient(ctx context.Context, in *UnicastPushRequest, opts ...grpc.CallOption) (*UnicastPushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnicastPushResponse)
	err := c.cc.Invoke(ctx, GatewayService_PushToClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) BroadcastToClients(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, GatewayService_BroadcastToClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) RegisterUpstream(ctx context.Context, in *UpstreamRegisterRequest, opts ...grpc.CallOption) (*UpstreamRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpstreamRegisterResponse)
	err := c.cc.Invoke(ctx, GatewayService_RegisterUpstream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility.
//
// 网关服务接口定义 - 供上游服务调用
type GatewayServiceServer interface {
	// 单播推送消息到指定客户端
	PushToClient(context.Context, *UnicastPushRequest) (*UnicastPushResponse, error)
	// ADDED FOR BROADCAST: 广播消息到所有在线客户端
	BroadcastToClients(context.Context, *BroadcastRequest) (*BroadcastResponse, error)
	// upstream服务注册
	RegisterUpstream(context.Context, *UpstreamRegisterRequest) (*UpstreamRegisterResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServiceServer struct{}

func (UnimplementedGatewayServiceServer) PushToClient(context.Context, *UnicastPushRequest) (*UnicastPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToClient not implemented")
}
func (UnimplementedGatewayServiceServer) BroadcastToClients(context.Context, *BroadcastRequest) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastToClients not implemented")
}
func (UnimplementedGatewayServiceServer) RegisterUpstream(context.Context, *UpstreamRegisterRequest) (*UpstreamRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUpstream not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}
func (UnimplementedGatewayServiceServer) testEmbeddedByValue()                        {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_PushToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnicastPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).PushToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_PushToClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).PushToClient(ctx, req.(*UnicastPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_BroadcastToClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).BroadcastToClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_BroadcastToClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).BroadcastToClients(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_RegisterUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpstreamRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RegisterUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_RegisterUpstream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RegisterUpstream(ctx, req.(*UpstreamRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gatesvr.proto.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushToClient",
			Handler:    _GatewayService_PushToClient_Handler,
		},
		{
			MethodName: "BroadcastToClients",
			Handler:    _GatewayService_BroadcastToClients_Handler,
		},
		{
			MethodName: "RegisterUpstream",
			Handler:    _GatewayService_RegisterUpstream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upstream.proto",
}
